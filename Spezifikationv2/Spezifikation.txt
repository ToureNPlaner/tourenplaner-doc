ToureNPlaner Protocol Specification
====================================

== Introduction
The protocol is using HTTP/S as Transport Layer. The encoding used is JSON and optionally http://wiki.fasterxml.com/SmileFormat[SMILE] (binary JSON) as used by the Jackson project. The server might sent answers in SMILE if the client adds +application/x-jackson-smile+ to its HTTP Accept Header, plain JSON otherwise.

The server supports two modi: public and privat. In public mode only the info and alg* request are supported. In private mode user authentication is used.

== Data Formats
=== Coordinates
All coordinates are sent as integers using a fixed point presentation with a factor of +10e7+. E.g. the latitude +50.1234+ is encoded as +5012340000+.

=== Date-Time-Strings
Date-Time-Strings are encoded after ISO 8061. E.g.: +2000-12-11T13:55:30.000+0000+ or +2000-12-11T13:55:30Z+.

== Public Requests

.List of available commands in public mode:
[options="header",format="dsv"]
|=======================
URL: Description
<<info,+/info+>>: Get server information
<<alg,+/alg*+>>: Make a request to the server, where +*+ is the shortname of an algorithm
|=======================

=== +/info+ [[info]]
[format="dsv"]
|=======================
Description: Get information about available algorithms and other properties of the server.
HTTP-Method: GET
Authentication: Never
SSL: Optional
URL-Parameters: None
|=======================

==== Response

[options="autowidth,header",cols="3*"]
|==================================
|Name    | Type  | Description
|version | +Float+ | The version of the protocol
|servertype | +String+ | Either +public+ or +private+
|sslport|+Integer+| The SSL port of the server
|algorithms|+Array+| Array of <<algorithm_object,+Algorithm+>> Objects
|==================================

==== Example
-----
{
   "algorithms" : [
      {
         "constraints" : [],
         "version" : 1,
         "name" : "Traveling Salesman",
         "urlsuffix" : "tsp",
         "pointconstraints" : [],
         "details" : {
            "minpoints" : 2,
            "hidden" : false,
            "sourceistarget" : true
         }
      },
      {
         "constraints" : [],
         "version" : 1,
         "name" : "Shortest Path CH",
         "urlsuffix" : "sp",
         "pointconstraints" : [],
         "details" : {
            "minpoints" : 2,
            "hidden" : false,
            "sourceistarget" : false
         }
      },
      {
         "constraints" : [],
         "version" : 1,
         "name" : "Nearest Neighbor Search",
         "urlsuffix" : "nns",
         "pointconstraints" : [],
         "details" : {
            "minpoints" : 1,
            "hidden" : true,
            "sourceistarget" : false
         }
      },
      {
         "constraints" : [],
         "version" : 0,
         "name" : "Text Renderer",
         "urlsuffix" : "text_renderer",
         "pointconstraints" : [
            {
               "name" : "Text",
               "type" : "string",
               "id" : "text",
               "description" : "The text to print"
            },
            {
               "name" : "Size",
               "type" : "enum",
               "values" : [
                  "small",
                  "normal",
                  "large"
               ],
               "id" : "size",
               "description" : "The size of the text to print"
            }
         ],
         "details" : {
            "maxpoints" : 1,
            "minpoints" : 1,
            "hidden" : false,
            "sourceistarget" : true
         }
      },
      {
         "constraints" : [
            {
               "min" : 0,
               "name" : "Maximum Altitude Difference",
               "type" : "meter",
               "id" : "maxAltitudeDifference",
               "description" : "The maximum altitude difference over the path"
            }
         ],
         "version" : 1,
         "name" : "Constrained Shortest Path",
         "urlsuffix" : "csp",
         "pointconstraints" : [],
         "details" : {
            "maxpoints" : 2,
            "minpoints" : 2,
            "hidden" : false,
            "sourceistarget" : false
         }
      }
   ],
   "version" : 0.1,
   "servertype" : "private",
   "sslport" : 443
}
-----

=== +/alg*+ [[alg]]
fdgfdg

== Private Requests

.List of available commands in private mode:
[options="autowidth,header",format="dsv"]
|=======================
URL: Description
+/authuser+: Check the provided authentication is correct
+/listrequests+: List all request from every user of from a specific user
+/getuser+: Get information about a user
+/getreqeuest+: Get a previously issued request
+/updateuser+: Change user information
+/registeruser+: Register a user
|=======================

.List of available commands which need admin privileges in private mode:
[options="header",format="dsv"]
|=======================
URL: Description
+/listusers+: List all users
+/deleteuser+: Delete a user
|=======================

== Data Types (Objects)
=== Algorithm [[algorithm_object]]
[options="header,autowidth",cols="3*a"]
|==================================
|Name    | Type  | Description
|version|+Integer+|version of the algorithm
|name|+String+|Name of the algorithm
|description|+String+|Description of the algorithm
|urlsuffix|+String+|The URL suffix of the algorithm, used in <<alg,+alg*+>> Requests
|constraints|+Array+, +Optional+|Array of <<constraint_object,+Constraint+>> Objects, as used for the algorithm
|pointconstraints|+Array+, +Optional+|Array of <<constraint_object,+Constraint+>> Objects, as used for the points
|details|+Object+, +Optional+|
:frame: none
[options="header,autowidth", cols="3*"]
!==============================================
!Name    ! Type  ! Description
!hidden!+Boolean+, +Optional+

Default=False! If the user should be able to select the algorithm
!minpoints!+Integer+, +Optional+ 

Default=+0+!The minium number of points the algorithm expects

!sourceistarget!+Boolean+, +Optional+

Default=+False+! If false the request has a source and target
!==============================================
|==================================

=== Constraint [[constraint_object]]
[options="header,autowidth",cols="3*"]
|==================================
|Name    | Type  | Description
|id|+String+|ID of the constraint
|name|+String+|name of the constraint_object
|description|+String+|description of the constraint
|type|+String+|Either <<integer_constraint,+integer+>>, <<float_constraint,+float+>>, <<meter_constraint,+meter+>>, <<price_constraint,+price+>>, <<string_constraint, +string+>> or <<enum_constraint, +enum+>>
|==================================

==== Float Constraint [[float_constraint]]
The JSON data type is +float+. 

===== Additional attributes
[options="header,autowidth",cols="3*"]
|==================================
|Name    | Type  | Description
|min|Float|Minimal value
|max|Float|Maximum value
|==================================
